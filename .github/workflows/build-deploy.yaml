name: Build and deploy app on AKS cluster

on:
 push:
   branches:
     - main

jobs:
  build:
    name: Docker build and push image to ACR
    runs-on: ubuntu-latest
    env:
      IMAGE_NAME: paloitinternalregistry.azurecr.io/${GITHUB_REPOSITORY##*/}:${{ github.ref_name }}

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Docker Login
        uses: azure/docker-login@v2
        with:
          login-server: ${{ secrets.ACR_INTERNAL_CLUSTER_LOGIN_SERVER }}
          username: ${{ secrets.ACR_INTERNAL_CLUSTER_ADMIN_USERNAME }}
          password: ${{ secrets.ACR_INTERNAL_CLUSTER_ADMIN_PASSWORD }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image and push it to ACR
        uses: docker/build-push-action@v5
        with:
          push: true
          tags: ${{ env.IMAGE_NAME }}
          file: Dockerfile
          cache-from: type=registry,ref=${{ env.IMAGE_NAME }}}}
          cache-to: type=inline

  deploy:
    permissions:
      actions: read
      contents: read
      id-token: write
    name: Deploy on AKS cluster
    runs-on: ubuntu-latest
    needs: [build]
    env:
      NAMESPACE: react-xr-workshop-dev
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Azure login
        uses: azure/login@v2.1.1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      # Use kubelogin to configure your kubeconfig for Azure auth
      - name: Set up kubelogin for non-interactive login
        uses: azure/use-kubelogin@v1
        with:
          kubelogin-version: "v0.0.25"

      # Retrieves your Azure Kubernetes Service cluster's kubeconfig file
      - name: Get K8s context
        uses: azure/aks-set-context@v4.0.1
        with:
          resource-group: palo-it-cluster-rg
          cluster-name: palo-it-internal-cluster
          admin: "false"
          use-kubelogin: "true"

      # Runs Helm to create manifest files
      - name: Bake deployment
        uses: azure/k8s-bake@v3.0.1
        with:
          renderEngine: "helm"
          helmChart: ./demo-app/infrastructure/helm
          helm-version: "latest"
          overrides: |
            env.AZURE_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
            env.AZURE_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
        id: bake

      - name: Create namespace if doesn't exist
        run: |
          kubectl get namespace $NAMESPACE || kubectl create namespace $NAMESPACE
        
      # Deploys application based on manifest files from previous step
      - name: Deploy application
        uses: Azure/k8s-deploy@v5
        with:
          namespace: ${{ env.NAMESPACE }}
          action: deploy
          manifests: ${{ steps.bake.outputs.manifestsBundle }}
          pull-images: false
