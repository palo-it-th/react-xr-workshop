/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 ./squeak_ghost_win.glb --types 
Author: xxcoobloyxx (https://sketchfab.com/xxcoobloyxx)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/squeak-ghost-win-910d136ea33e4646ad7f10f1dd3c767b
Title: Squeak Ghost Win
*/

import React, { useEffect } from 'react';
import * as THREE from 'three';
import { GLTF, SkeletonUtils } from 'three-stdlib';
import { useGraph } from '@react-three/fiber';
import { useAnimations, useGLTF } from '@react-three/drei';
import {
  MonsterCurrentState,
  MonsterModelBase,
  UseSpawnMonsterBase,
} from '../../../types/common';
import { useSpawnMonster } from '../../../hooks/useSpawnMonster';

type ActionName = 'clip_hips_s:SSC';

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    Object_7: THREE.SkinnedMesh;
    Object_9: THREE.SkinnedMesh;
    Object_11: THREE.SkinnedMesh;
    Object_13: THREE.SkinnedMesh;
    Object_14: THREE.SkinnedMesh;
    Object_16: THREE.SkinnedMesh;
    Object_18: THREE.SkinnedMesh;
    Object_20: THREE.SkinnedMesh;
    GLTF_created_0_rootJoint: THREE.Bone;
  };
  materials: {
    character_mat: THREE.MeshStandardMaterial;
    character_metal_mat: THREE.MeshStandardMaterial;
    character_emit_mat: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

type MergedProps = MonsterModelBase<ActionName> & UseSpawnMonsterBase;
type GhostActionProps = Omit<MergedProps, 'monsterRef' | 'isMonsterDead'>;

export default function SqueakGhostWin(
  props: JSX.IntrinsicElements['group'] & GhostActionProps,
) {
  const {
    objectID,
    triggerAction,
    stopAction,
    stopAllActions,
    onMonsterSpawnedByObjectId,
    respawnTimer,
    firstSpawnTimer,
    monsterActionState,
    initialPosition,
    usedPositions,
  } = props;

  const modelRef = React.useRef<THREE.Group>(null);
  const { scene, animations } = useGLTF('/3D-models/squeak_ghost_win.glb');
  const clone = React.useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone) as GLTFResult;
  const { actions } = useAnimations(animations, modelRef);

  useSpawnMonster({
    monsterRef: modelRef,
    respawnTimer,
    firstSpawnTimer,
    isMonsterDead: monsterActionState === MonsterCurrentState.DEAD,
    initialPosition,
    onMonsterSpawned: (position) => {
      onMonsterSpawnedByObjectId?.(objectID, position);
    },
    usedPositions,
    objectSize: 2,
  });

  useEffect(() => {
    if (props.triggerAction) {
      actions[props.triggerAction]?.play();
    }
    if (props.stopAction) {
      actions[props.stopAction]?.stop();
    }
    if (props.stopAllActions && Object.keys(actions).length > 0) {
      Object.values(actions).forEach((action) => action?.stop());
    }
  }, [triggerAction, stopAction, stopAllActions, actions]);

  return (
    <group ref={modelRef} {...props} dispose={null}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="root">
            <group name="GLTF_SceneRootNode" rotation={[Math.PI / 2, 0, 0]}>
              <group name="CHARACTER_138" position={[0, 1.418, 0]}>
                <group name="GLTF_created_0">
                  <primitive object={nodes.GLTF_created_0_rootJoint} />
                  <group name="body_Geo_low_131" />
                  <group name="chain_geo_low_132" />
                  <group name="goo_Geo_low_133" />
                  <group name="lantern_geo_low_134" />
                  <group name="lock_geo_low_135" />
                  <group name="teeth_low_136" />
                  <group name="tongue_Geo_low_137" />
                  <skinnedMesh
                    name="Object_7"
                    geometry={nodes.Object_7.geometry}
                    material={materials.character_mat}
                    skeleton={nodes.Object_7.skeleton}
                  />
                  <skinnedMesh
                    name="Object_9"
                    geometry={nodes.Object_9.geometry}
                    material={materials.character_metal_mat}
                    skeleton={nodes.Object_9.skeleton}
                  />
                  <skinnedMesh
                    name="Object_11"
                    geometry={nodes.Object_11.geometry}
                    material={materials.character_mat}
                    skeleton={nodes.Object_11.skeleton}
                  />
                  <skinnedMesh
                    name="Object_13"
                    geometry={nodes.Object_13.geometry}
                    material={materials.character_metal_mat}
                    skeleton={nodes.Object_13.skeleton}
                  />
                  <skinnedMesh
                    name="Object_14"
                    geometry={nodes.Object_14.geometry}
                    material={materials.character_emit_mat}
                    skeleton={nodes.Object_14.skeleton}
                  />
                  <skinnedMesh
                    name="Object_16"
                    geometry={nodes.Object_16.geometry}
                    material={materials.character_metal_mat}
                    skeleton={nodes.Object_16.skeleton}
                  />
                  <skinnedMesh
                    name="Object_18"
                    geometry={nodes.Object_18.geometry}
                    material={materials.character_mat}
                    skeleton={nodes.Object_18.skeleton}
                  />
                  <skinnedMesh
                    name="Object_20"
                    geometry={nodes.Object_20.geometry}
                    material={materials.character_mat}
                    skeleton={nodes.Object_20.skeleton}
                  />
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
}

useGLTF.preload('/3D-models/squeak_ghost_win.glb');
