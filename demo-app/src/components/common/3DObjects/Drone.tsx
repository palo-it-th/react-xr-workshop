/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.5.0 ./drone.glb --types 
Author: Miaru3d (https://sketchfab.com/miaru3d)
License: SKETCHFAB Standard (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/pearl-drone-splatoon-side-order-trailer-fc90b7685d4e49f4a6eb522dfb07dca1
Title: Pearl Drone - Splatoon Side Order Trailer
*/

import * as THREE from 'three';
import React, { useEffect, useRef, useMemo } from 'react';
import { useGraph } from '@react-three/fiber';
import { useGLTF, useAnimations, Box } from '@react-three/drei';
import { GLTF, SkeletonUtils } from 'three-stdlib';
import {
  MonsterCurrentState,
  MonsterModelBase,
  UseSpawnMonsterBase,
} from '../../../types/common';
import { useSpawnMonster } from '../../../hooks/useSpawnMonster';
import { RigidBody } from '@react-three/rapier';
import { applyLODToGroup } from '../../../utils/lodOptimization';
import { useCameraPosition } from '../../../hooks/useCameraPosition';
import { useInteractionStore } from '../../../state/interactionStore';

type ActionName = 'Vertical';

interface GLTFAction extends THREE.AnimationClip {
  name: ActionName;
}

type GLTFResult = GLTF & {
  nodes: {
    Plane_MainBody_0: THREE.Mesh;
    Plane001_MainBody_0: THREE.Mesh;
    Plane002_MainBody_0: THREE.Mesh;
    Plane003_MainBody_0: THREE.Mesh;
    Circle008_EyeEmit_0: THREE.Mesh;
    Circle009_EyeEmit_0: THREE.Mesh;
    Plane004_EyeGlass_0: THREE.Mesh;
    Circle005_MainBody_0: THREE.Mesh;
    Circle004_MainBody_0: THREE.Mesh;
    Circle003_MainBody_0: THREE.Mesh;
    Circle001_Crown_0: THREE.Mesh;
    Circle007_MainBody_0: THREE.Mesh;
    Circle_MainBody_0: THREE.Mesh;
    Circle_UnderGlass_0: THREE.Mesh;
    Object_16: THREE.SkinnedMesh;
    _rootJoint: THREE.Bone;
  };
  materials: {
    MainBody: THREE.MeshPhysicalMaterial;
    EyeEmit: THREE.MeshStandardMaterial;
    EyeGlass: THREE.MeshPhysicalMaterial;
    Crown: THREE.MeshPhysicalMaterial;
    UnderGlass: THREE.MeshStandardMaterial;
  };
  animations: GLTFAction[];
};

type MergedActionProps = MonsterModelBase<ActionName> & UseSpawnMonsterBase;
type DroneActionProps = Omit<MergedActionProps, 'monsterRef' | 'isMonsterDead'>;

// Create optimized materials (only do this once)
const optimizedMaterials = {
  // Cache for optimized materials
  cache: new Map<string, THREE.Material>(),
  
  // Get optimized version of a material
  get(originalMaterial: THREE.Material, name: string) {
    if (this.cache.has(name)) {
      return this.cache.get(name)!;
    }
    
    let material: THREE.Material;
    
    // Convert expensive materials to cheaper alternatives
    if (originalMaterial instanceof THREE.MeshPhysicalMaterial) {
      material = new THREE.MeshStandardMaterial({
        color: originalMaterial.color,
        map: originalMaterial.map,
        emissive: originalMaterial.emissive,
        emissiveMap: originalMaterial.emissiveMap,
        roughness: originalMaterial.roughness,
        metalness: originalMaterial.metalness,
        transparent: originalMaterial.transparent,
        opacity: originalMaterial.opacity,
      });
    } else {
      // For other materials, just clone
      material = originalMaterial.clone();
    }
    
    // Lower precision if it's not the eye (which needs to be visible)
    if (!name.includes('Eye')) {
      if (material instanceof THREE.MeshStandardMaterial) {
        material.roughness = Math.min(material.roughness + 0.2, 1.0);
        material.metalness = Math.max(material.metalness - 0.2, 0);
      }
    }
    
    this.cache.set(name, material);
    return material;
  }
};

const Drone = (props: JSX.IntrinsicElements['group'] & DroneActionProps) => {
  const {
    objectID,
    triggerAction,
    stopAction,
    stopAllActions,
    onMonsterSpawnedByObjectId,
    respawnTimer,
    firstSpawnTimer,
    monsterActionState,
    initialPosition,
    usedPositions,
  } = props;

  const modelRef = useRef<THREE.Group>(null);
  const { scene, animations } = useGLTF('/3D-models/drone.glb');
  const clone = useMemo(() => SkeletonUtils.clone(scene), [scene]);
  const { nodes, materials } = useGraph(clone) as GLTFResult;
  const { actions } = useAnimations(animations, modelRef);
  
  // Track camera position for LOD optimization
  const cameraPositionRef = useCameraPosition();
  
  // Create a simplified collision box to make raycasting more efficient
  const collisionBoxRef = useRef<THREE.Mesh>(null);
  const isDead = monsterActionState === MonsterCurrentState.DEAD;

  // Use optimized materials
  const optimizedMaterialsRef = useMemo(() => {
    return {
      MainBody: optimizedMaterials.get(materials.MainBody, 'MainBody'),
      EyeEmit: optimizedMaterials.get(materials.EyeEmit, 'EyeEmit'),
      EyeGlass: optimizedMaterials.get(materials.EyeGlass, 'EyeGlass'), 
      Crown: optimizedMaterials.get(materials.Crown, 'Crown'),
      UnderGlass: optimizedMaterials.get(materials.UnderGlass, 'UnderGlass')
    };
  }, [materials]);

  useSpawnMonster({
    monsterRef: modelRef,
    respawnTimer,
    firstSpawnTimer,
    isMonsterDead: isDead,
    initialPosition,
    onMonsterSpawned: (position) => {
      onMonsterSpawnedByObjectId?.(objectID, position);
    },
    usedPositions,
    objectSize: 2,
  });

  useEffect(() => {
    if (props.triggerAction) {
      actions[props.triggerAction]?.play();
    }
    if (props.stopAction) {
      actions[props.stopAction]?.stop();
    }
    if (props.stopAllActions && Object.keys(actions).length > 0) {
      Object.values(actions).forEach((action) => action?.stop());
    }
  }, [triggerAction, stopAction, stopAllActions, actions]);

  // Apply LOD optimization based on camera distance
  useEffect(() => {
    // Throttle the LOD updates to every 500ms to avoid excessive recalculations
    const lodUpdateInterval = setInterval(() => {
      if (modelRef.current && cameraPositionRef.current) {
        applyLODToGroup(modelRef.current, cameraPositionRef.current);
      }
    }, 500);
    
    return () => {
      clearInterval(lodUpdateInterval);
    };
  }, []);

  // Handle click events through the collision box instead of the complex mesh
  const handleClick = (e: any) => {
    e.stopPropagation();
    
    // Use the interaction store to throttle interactions
    const interactionStore = useInteractionStore.getState();
    
    if (interactionStore.canInteract()) {
      interactionStore.setFocusedObject(objectID);
      
      if (props.onClick) {
        props.onClick(e);
      }
    }
  };

  return (
    <group ref={modelRef} {...props} dispose={null} onClick={undefined}>
      {/* Invisible collision box for raycasting - much more efficient */}
      <Box 
        ref={collisionBoxRef}
        args={[2, 2, 2]} 
        position={[0, 0, 0]}
        visible={false}
        onClick={handleClick}
      />
      
      <group name="Sketchfab_Scene">
        <group
          name="Sketchfab_model"
          rotation={[-Math.PI / 2, 0, 0]}
          scale={1.134}
        >
          <group
            name="9281ed46901044c1b72a2a833dfc8f2afbx"
            rotation={[Math.PI / 2, 0, 0]}
            scale={0.01}
          >
            <group name="Object_2">
              <group name="RootNode">
                <group
                  name="Plane"
                  position={[-1.328, 8.325, 0]}
                  rotation={[-1.345, -0.029, -1.696]}
                  scale={19.791}
                >
                  <mesh
                    name="Plane_MainBody_0"
                    geometry={nodes.Plane_MainBody_0.geometry}
                    material={optimizedMaterialsRef.MainBody}
                  />
                </group>
                <group
                  name="Plane001"
                  position={[-1.328, 8.325, 0]}
                  rotation={[-1.541, 0.225, -0.132]}
                  scale={19.791}
                >
                  <mesh
                    name="Plane001_MainBody_0"
                    geometry={nodes.Plane001_MainBody_0.geometry}
                    material={optimizedMaterialsRef.MainBody}
                  />
                </group>
                <group
                  name="Plane002"
                  position={[-1.328, 8.325, 0]}
                  rotation={[-1.796, 0.029, 1.446]}
                  scale={19.791}
                >
                  <mesh
                    name="Plane002_MainBody_0"
                    geometry={nodes.Plane002_MainBody_0.geometry}
                    material={optimizedMaterialsRef.MainBody}
                  />
                </group>
                <group
                  name="Plane003"
                  position={[-1.328, 8.325, 0]}
                  rotation={[-1.6, -0.225, 3.01]}
                  scale={19.791}
                >
                  <mesh
                    name="Plane003_MainBody_0"
                    geometry={nodes.Plane003_MainBody_0.geometry}
                    material={optimizedMaterialsRef.MainBody}
                  />
                </group>
                <group
                  name="Armature"
                  position={[-1.328, 2.666, 0]}
                  rotation={[-Math.PI / 2, 0, 0]}
                  scale={100}
                >
                  <group name="Object_13">
                    <group
                      name="Circle"
                      position={[0, 0, 0.167]}
                      rotation={[Math.PI / 2, 0, 0]}
                    >
                      <group
                        name="Plane004"
                        position={[0, 0.035, 0.127]}
                        rotation={[-Math.PI / 2, 0, 0]}
                      >
                        <group
                          name="Circle008"
                          position={[0.07, 0.01, -0.033]}
                          rotation={[0.041, -0.095, -2.637]}
                        >
                          <mesh
                            name="Circle008_EyeEmit_0"
                            geometry={nodes.Circle008_EyeEmit_0.geometry}
                            material={optimizedMaterialsRef.EyeEmit}
                          />
                        </group>
                        <group
                          name="Circle009"
                          position={[-0.03, -0.003, -0.043]}
                          rotation={[0, 0.045, 0]}
                          scale={0.503}
                        >
                          <mesh
                            name="Circle009_EyeEmit_0"
                            geometry={nodes.Circle009_EyeEmit_0.geometry}
                            material={optimizedMaterialsRef.EyeEmit}
                          />
                        </group>
                        <mesh
                          name="Plane004_EyeGlass_0"
                          geometry={nodes.Plane004_EyeGlass_0.geometry}
                          material={optimizedMaterialsRef.EyeGlass}
                        />
                      </group>
                      <group
                        name="Circle005"
                        position={[0.028, 0.055, 0.105]}
                        rotation={[-2.015, -0.105, 0.254]}
                      >
                        <mesh
                          name="Circle005_MainBody_0"
                          geometry={nodes.Circle005_MainBody_0.geometry}
                          material={optimizedMaterialsRef.MainBody}
                        />
                      </group>
                      <group
                        name="Circle004"
                        position={[-0.028, 0.048, 0.116]}
                        rotation={[1.058, -0.08, 0.208]}
                      >
                        <mesh
                          name="Circle004_MainBody_0"
                          geometry={nodes.Circle004_MainBody_0.geometry}
                          material={optimizedMaterialsRef.MainBody}
                        />
                      </group>
                      <group
                        name="Circle001"
                        position={[0.037, 0.094, 0.018]}
                        rotation={[-1.438, 0.269, -0.036]}
                      >
                        <group name="Circle003">
                          <mesh
                            name="Circle003_MainBody_0"
                            geometry={nodes.Circle003_MainBody_0.geometry}
                            material={optimizedMaterialsRef.MainBody}
                          />
                        </group>
                        <mesh
                          name="Circle001_Crown_0"
                          geometry={nodes.Circle001_Crown_0.geometry}
                          material={optimizedMaterialsRef.Crown}
                        />
                      </group>
                      <group
                        name="Circle002"
                        position={[-1.328, 19.394, 0]}
                        scale={100}
                      />
                      <group name="Circle007">
                        <mesh
                          name="Circle007_MainBody_0"
                          geometry={nodes.Circle007_MainBody_0.geometry}
                          material={optimizedMaterialsRef.MainBody}
                        />
                      </group>
                      <mesh
                        name="Circle_MainBody_0"
                        geometry={nodes.Circle_MainBody_0.geometry}
                        material={optimizedMaterialsRef.MainBody}
                      />
                      <mesh
                        name="Circle_UnderGlass_0"
                        geometry={nodes.Circle_UnderGlass_0.geometry}
                        material={optimizedMaterialsRef.UnderGlass}
                      />
                    </group>
                    <primitive object={nodes._rootJoint} />
                    <group
                      name="Object_15"
                      position={[-1.328, 19.394, 0]}
                      scale={100}
                    />
                    <skinnedMesh
                      name="Object_16"
                      geometry={nodes.Object_16.geometry}
                      material={optimizedMaterialsRef.MainBody}
                      skeleton={nodes.Object_16.skeleton}
                    />
                  </group>
                </group>
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  );
};

export default Drone;

useGLTF.preload('/3D-models/drone.glb');
